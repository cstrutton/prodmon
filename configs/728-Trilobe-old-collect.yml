minimum_cycle: .5

tags:
  - type: counter                 # type = counter | state
    driver: pylogix               # type = pylogix | modbus
    processor_ip: 192.168.100.1   # processor_ip is the controller's ip address
    processor_slot: 0             # processor_slot is the controller's slot
    tag: 'Program:MainProgram.ProdCountLine.ACC'    # tag is the PLC tag to read
    Part_Number: '50-1467'
    Scale: 1
    frequency: .5                 # how often to try to read the tag in seconds
    table: GFxPRoduction          # database table to write to
    Machine: 728                  # written to machine column in db

  - type: counter                 # type = counter | state
    driver: pylogix               # type = pylogix | modbus
    processor_ip: 192.168.100.1   # processor_ip is the controller's ip address
    processor_slot: 0             # processor_slot is the controller's slot
    tag: 'Program:MainProgram.ProdCountOverflow.ACC'    # tag is the PLC tag to read
    Part_Number: '50-1467'
    Scale: 1
    frequency: .5                 # how often to try to read the tag in seconds
    table: GFxPRoduction          # database table to write to
    Machine: 728                  # written to machine column in db

  - type: counter                 # type = counter | state
    driver: pylogix               # type = pylogix | modbus
    processor_ip: 192.168.100.1   # processor_ip is the controller's ip address
    processor_slot: 0             # processor_slot is the controller's slot
    tag: 'Program:MainProgram.ProdCountReject.ACC'    # tag is the PLC tag to read
    Part_Number: '50-1467'
    Scale: 1
    frequency: .5                 # how often to try to read the tag in seconds
    table: GFxPRoduction          # database table to write to
    Machine: 728                  # written to machine column in db

  - type: counter                 # type = counter | state
    driver: modbus                # type = pylogix | modbus
    processor_ip: 10.4.42.169     # processor_ip is the controller's ip address
    register: 16                  # modbus register to read
    reg_size: 2
    Part_Number: '50-1467'
    Scale: 1
    frequency: .5                 # how often to try to read the tag in seconds
    table: GFxPRoduction          # database table to write to
    Machine: 650L                 # written to machine column in db

  - type: counter                 # type = counter | state
    driver: modbus                # type = pylogix | modbus
    processor_ip: 10.4.42.169     # processor_ip is the controller's ip address
    register: 18                  # modbus register to read
    reg_size: 2
    Part_Number: '50-1467'
    Scale: 1
    frequency: .5                 # how often to try to read the tag in seconds
    table: GFxPRoduction          # database table to write to
    Machine: 650R                  # written to machine column in db

  - type: state                   # type = counter | state
    driver: pylogix               # type = pylogix | modbus
    processor_ip: 192.168.100.1   # processor_ip is the controller's ip address
    processor_slot: 0             # processor_slot is the controller's slot
    tag: 'Program:MainProgram.dropoffTimeoutSeconds'    # tag is the PLC tag to read
    data_tag: '728dropofftimeout' # state id
    frequency: 1                  # how often to try to read the tag in seconds
    always: False                 # create entry every poll if True, only on change if False
    table: production_state       # database table to write to
